// This file is auto-generated by @hey-api/openapi-ts

import { type Options, postAccountsSignupV1, postAccountsLoginV1, getAccountsProfileMeV1, patchAccountsProfileMeV1, postAccountsRefreshTokenV1, postAccountsResetPasswordV1, postAccountsConfirmResetPasswordV1, healthCheckHealthGet } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { PostAccountsSignupV1Data, PostAccountsSignupV1Error, PostAccountsSignupV1Response, PostAccountsLoginV1Data, PostAccountsLoginV1Error, PostAccountsLoginV1Response, GetAccountsProfileMeV1Data, PatchAccountsProfileMeV1Data, PatchAccountsProfileMeV1Error, PostAccountsRefreshTokenV1Data, PostAccountsRefreshTokenV1Error, PostAccountsRefreshTokenV1Response, PostAccountsResetPasswordV1Data, PostAccountsResetPasswordV1Error, PostAccountsConfirmResetPasswordV1Data, PostAccountsConfirmResetPasswordV1Error, HealthCheckHealthGetData } from '../types.gen';
import type { AxiosError } from 'axios';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseURL' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseURL: (options?.client ?? _heyApiClient).getConfig().baseURL } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const postAccountsSignupV1QueryKey = (options: Options<PostAccountsSignupV1Data>) => createQueryKey('postAccountsSignupV1', options);

export const postAccountsSignupV1Options = (options: Options<PostAccountsSignupV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAccountsSignupV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAccountsSignupV1QueryKey(options)
    });
};

export const postAccountsSignupV1Mutation = (options?: Partial<Options<PostAccountsSignupV1Data>>): UseMutationOptions<PostAccountsSignupV1Response, AxiosError<PostAccountsSignupV1Error>, Options<PostAccountsSignupV1Data>> => {
    const mutationOptions: UseMutationOptions<PostAccountsSignupV1Response, AxiosError<PostAccountsSignupV1Error>, Options<PostAccountsSignupV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAccountsSignupV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAccountsLoginV1QueryKey = (options: Options<PostAccountsLoginV1Data>) => createQueryKey('postAccountsLoginV1', options);

export const postAccountsLoginV1Options = (options: Options<PostAccountsLoginV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAccountsLoginV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAccountsLoginV1QueryKey(options)
    });
};

export const postAccountsLoginV1Mutation = (options?: Partial<Options<PostAccountsLoginV1Data>>): UseMutationOptions<PostAccountsLoginV1Response, AxiosError<PostAccountsLoginV1Error>, Options<PostAccountsLoginV1Data>> => {
    const mutationOptions: UseMutationOptions<PostAccountsLoginV1Response, AxiosError<PostAccountsLoginV1Error>, Options<PostAccountsLoginV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAccountsLoginV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getAccountsProfileMeV1QueryKey = (options?: Options<GetAccountsProfileMeV1Data>) => createQueryKey('getAccountsProfileMeV1', options);

export const getAccountsProfileMeV1Options = (options?: Options<GetAccountsProfileMeV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getAccountsProfileMeV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getAccountsProfileMeV1QueryKey(options)
    });
};

export const patchAccountsProfileMeV1Mutation = (options?: Partial<Options<PatchAccountsProfileMeV1Data>>): UseMutationOptions<unknown, AxiosError<PatchAccountsProfileMeV1Error>, Options<PatchAccountsProfileMeV1Data>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<PatchAccountsProfileMeV1Error>, Options<PatchAccountsProfileMeV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await patchAccountsProfileMeV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAccountsRefreshTokenV1QueryKey = (options: Options<PostAccountsRefreshTokenV1Data>) => createQueryKey('postAccountsRefreshTokenV1', options);

export const postAccountsRefreshTokenV1Options = (options: Options<PostAccountsRefreshTokenV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAccountsRefreshTokenV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAccountsRefreshTokenV1QueryKey(options)
    });
};

export const postAccountsRefreshTokenV1Mutation = (options?: Partial<Options<PostAccountsRefreshTokenV1Data>>): UseMutationOptions<PostAccountsRefreshTokenV1Response, AxiosError<PostAccountsRefreshTokenV1Error>, Options<PostAccountsRefreshTokenV1Data>> => {
    const mutationOptions: UseMutationOptions<PostAccountsRefreshTokenV1Response, AxiosError<PostAccountsRefreshTokenV1Error>, Options<PostAccountsRefreshTokenV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAccountsRefreshTokenV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAccountsResetPasswordV1QueryKey = (options: Options<PostAccountsResetPasswordV1Data>) => createQueryKey('postAccountsResetPasswordV1', options);

export const postAccountsResetPasswordV1Options = (options: Options<PostAccountsResetPasswordV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAccountsResetPasswordV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAccountsResetPasswordV1QueryKey(options)
    });
};

export const postAccountsResetPasswordV1Mutation = (options?: Partial<Options<PostAccountsResetPasswordV1Data>>): UseMutationOptions<unknown, AxiosError<PostAccountsResetPasswordV1Error>, Options<PostAccountsResetPasswordV1Data>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<PostAccountsResetPasswordV1Error>, Options<PostAccountsResetPasswordV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAccountsResetPasswordV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const postAccountsConfirmResetPasswordV1QueryKey = (options: Options<PostAccountsConfirmResetPasswordV1Data>) => createQueryKey('postAccountsConfirmResetPasswordV1', options);

export const postAccountsConfirmResetPasswordV1Options = (options: Options<PostAccountsConfirmResetPasswordV1Data>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postAccountsConfirmResetPasswordV1({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postAccountsConfirmResetPasswordV1QueryKey(options)
    });
};

export const postAccountsConfirmResetPasswordV1Mutation = (options?: Partial<Options<PostAccountsConfirmResetPasswordV1Data>>): UseMutationOptions<unknown, AxiosError<PostAccountsConfirmResetPasswordV1Error>, Options<PostAccountsConfirmResetPasswordV1Data>> => {
    const mutationOptions: UseMutationOptions<unknown, AxiosError<PostAccountsConfirmResetPasswordV1Error>, Options<PostAccountsConfirmResetPasswordV1Data>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postAccountsConfirmResetPasswordV1({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const healthCheckHealthGetQueryKey = (options?: Options<HealthCheckHealthGetData>) => createQueryKey('healthCheckHealthGet', options);

export const healthCheckHealthGetOptions = (options?: Options<HealthCheckHealthGetData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await healthCheckHealthGet({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: healthCheckHealthGetQueryKey(options)
    });
};